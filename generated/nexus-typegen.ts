/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import { core } from 'nexus';
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void; // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date custom scalar type
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void; // "Date";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {}

export interface NexusGenEnums {
  StatusEnum: 'ARCHIVED' | 'DRAFT' | 'PUBLISHED';
}

export interface NexusGenScalars {
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  Date: any;
}

export interface NexusGenObjects {
  Query: {};
  Retreat: {
    // root type
    content?: string | null; // String
    created?: NexusGenScalars['Date'] | null; // Date
    id?: string | null; // ID
    maxParticipants?: number | null; // Int
    slug?: string | null; // String
    status?: NexusGenEnums['StatusEnum'] | null; // StatusEnum
    title?: string | null; // String
    totalParticipants?: number | null; // Int
    updated?: NexusGenScalars['Date'] | null; // Date
  };
}

export interface NexusGenInterfaces {
  Node: NexusGenRootTypes['Retreat'];
}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenInterfaces & NexusGenObjects;

export type NexusGenAllTypes = NexusGenRootTypes &
  NexusGenScalars &
  NexusGenEnums;

export interface NexusGenFieldTypes {
  Query: {
    // field return type
    listRetreats: Array<NexusGenRootTypes['Retreat'] | null>; // [Retreat]!
  };
  Retreat: {
    // field return type
    content: string | null; // String
    created: NexusGenScalars['Date'] | null; // Date
    id: string | null; // ID
    maxParticipants: number | null; // Int
    slug: string | null; // String
    status: NexusGenEnums['StatusEnum'] | null; // StatusEnum
    title: string | null; // String
    totalParticipants: number | null; // Int
    updated: NexusGenScalars['Date'] | null; // Date
  };
  Node: {
    // field return type
    id: string | null; // ID
  };
}

export interface NexusGenFieldTypeNames {
  Query: {
    // field return type name
    listRetreats: 'Retreat';
  };
  Retreat: {
    // field return type name
    content: 'String';
    created: 'Date';
    id: 'ID';
    maxParticipants: 'Int';
    slug: 'String';
    status: 'StatusEnum';
    title: 'String';
    totalParticipants: 'Int';
    updated: 'Date';
  };
  Node: {
    // field return type name
    id: 'ID';
  };
}

export interface NexusGenArgTypes {}

export interface NexusGenAbstractTypeMembers {
  Node: 'Retreat';
}

export interface NexusGenTypeInterfaces {
  Retreat: 'Node';
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = keyof NexusGenInterfaces;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = 'Retreat';

export type NexusGenAbstractsUsingStrategyResolveType = 'Node';

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false;
    resolveType: true;
    __typename: false;
  };
};

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames'];
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames'];
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes'];
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string,
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
