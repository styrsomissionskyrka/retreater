### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CheckoutSession {
  amount: Int
  currency: String
  customerEmail: String
  id: ID!
  lineItems: [LineItem!]!
  paymentIntent: PaymentIntent
  status: CheckoutSessionStatusEnum!
}

enum CheckoutSessionStatusEnum {
  NO_PAYMENT_REQUIRED
  PAID
  UNPAID
}

type Coupon {
  amountOff: Int
  created: Date!
  currency: String
  id: ID!
  percentOff: Float
}

input CreateOrderInput {
  """
  Optional discount for this specific order. Can only be applied by signed in users. In cents.
  """
  discount: Int
  email: String!
  name: String!
  price: ID!
  retreatId: ID!
}

input CreatePriceInput {
  active: Boolean
  amount: Int!
  currency: String!
  nickname: String
}

input CreateProductInput {
  active: Boolean
  description: String
  images: [String!]
  name: String!
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Date

type LineItem {
  amountSubtotal: Int!
  amountTotal: Int!
  currency: String!
  description: String
  id: ID!
  price: Price
  quantity: Int
}

enum LogEventEnum {
  ORDER_CHECKOUT_COMPLETED
  ORDER_CHECKOUT_INIT
  ORDER_CREATED
  ORDER_METADATA_UPDATED
  ORDER_STATUS_UPDATED
  RETREAT_ARCHIVED
  RETREAT_CREATED
  RETREAT_PRICE_CREATED
  RETREAT_PRICE_UPDATED
  RETREAT_PUBLISHED
  RETREAT_UNPUBLISHED
  RETREAT_UPDATED
}

type LogItem {
  createdAt: Date!
  event: LogEventEnum!
  id: ID!
  item: LogItemType
}

union LogItemType = Order | Retreat

type Mutation {
  cancelOrder(id: ID, sessionId: ID): Order
  checkoutOrder(id: ID!): OrderCheckoutSession!
  createOrder(
    """
    Signed in users can force order creation even if max participants is reached.
    """
    force: Boolean
    input: CreateOrderInput!
  ): Order!
  createPrice(input: CreatePriceInput!, productId: ID!): Price
  createProduct(input: CreateProductInput!, retreatId: ID!): Product
  createRefund(amount: Int, order: ID!, paymentIntent: ID!, reason: RefundReasonEnum): Refund!
  createRetreatDraft(title: String!): Retreat
  setRetreatStatus(id: ID!, status: RetreatStatusEnum!): Retreat
  updateOrderPrice(id: ID!, input: UpdateOrderPriceInput!): Order
  updatePrice(id: ID!, input: UpdatePriceInput!): Price
  updateProduct(id: ID!, input: UpdateProductInput!): Product
  updateProductPrice(input: CreatePriceInput!, productId: ID!): Price
  updateRetreat(id: ID!, input: UpdateRetreatInput!): Retreat
}

type Order {
  cancelledAt: Date
  checkoutSessions: [CheckoutSession!]!
  confirmedAt: Date
  coupon: Coupon
  createdAt: Date!
  email: String!
  id: ID!
  name: String!
  price: Price!
  refunds: [Refund!]!
  retreat: Retreat!
  status: OrderStatusEnum!
  updatedAt: Date!
}

type OrderCheckoutSession {
  checkoutSession: CheckoutSession!
  order: Order!
}

enum OrderEnum {
  ASC
  DESC
}

enum OrderOrderByEnum {
  CREATED_AT
  STATUS
}

enum OrderStatusEnum {
  CANCELLED
  CONFIRMED
  CREATED
  DECLINED
  ERRORED
  PARTIALLY_CONFIRMED
  PENDING
}

type PaginatedOrder implements PaginatedQuery {
  items: [Order!]!
  paginationMeta: PaginationMeta!
}

interface PaginatedQuery {
  paginationMeta: PaginationMeta!
}

type PaginatedRetreat implements PaginatedQuery {
  items: [Retreat!]!
  paginationMeta: PaginationMeta!
}

type PaginatedUser implements PaginatedQuery {
  items: [User!]!
  paginationMeta: PaginationMeta!
}

type PaginationMeta {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  perPage: Int!
  totalItems: Int!
  totalPages: Int!
}

type PaymentIntent {
  amount: Int!
  created: Date!
  currency: String!
  id: ID!

  """Total amount left to be refunded."""
  refundable: Int!

  """Total amount refunded, in cents."""
  refunded: Int!
}

type Price {
  active: Boolean!
  amount: Int!
  created: Date!
  currency: String!
  id: ID!
  nickname: String
  product: Product!
}

type Product {
  active: Boolean!
  created: Date!
  description: String
  id: ID!
  images: [String!]!
  name: String
  prices(active: Boolean): [Price!]!
  updated: Date!
  url: String
}

type Query {
  logs(id: ID!): [LogItem!]!
  me: User
  order(id: ID!): Order
  orders(order: OrderEnum! = ASC, orderBy: OrderOrderByEnum! = CREATED_AT, page: Int! = 1, perPage: Int! = 25, retreatId: ID, search: String, status: OrderStatusEnum = CONFIRMED): PaginatedOrder!
  paymentIntent(id: ID!): PaymentIntent!
  retreat(id: ID, slug: String): Retreat
  retreats(order: OrderEnum! = ASC, orderBy: RetreatOrderByEnum! = CREATED_AT, page: Int! = 1, perPage: Int! = 25, search: String, status: RetreatStatusEnum): PaginatedRetreat!
  user(email: String, id: ID): User
  users(page: Int! = 1, perPage: Int! = 25, search: String): PaginatedUser!
}

type Refund {
  amount: Int!
  created: Date!
  currency: String!
  id: ID!
  reason: String
  status: RefundStatusEnum!
}

enum RefundReasonEnum {
  duplicate
  fraudulent
  requested_by_customer
}

enum RefundStatusEnum {
  canceled
  failed
  pending
  succeeded
}

type Retreat {
  bookedParticipants: Int!

  """
  Tells if the retreat can be unbublished/archived. Will be false if the retreat has active orders, or is not yet published.
  """
  canDeactivate: Boolean!

  """
  Tells if a new order can be placed on the retreat. Will be false if currently active orders are equal to, or greater than, max participants.
  """
  canPlaceOrder: Boolean!
  content: String
  createdAt: Date!
  endDate: Date
  id: ID!
  maxParticipants: Int!
  orders(status: OrderStatusEnum): [Order!]
  products(active: Boolean): [Product!]!
  slug: String!
  startDate: Date
  status: RetreatStatusEnum!
  title: String!
  updatedAt: Date!
}

enum RetreatOrderByEnum {
  CREATED_AT
  START_DATE
  STATUS
}

enum RetreatStatusEnum {
  ARCHIVED
  DRAFT
  PUBLISHED
}

input UpdateOrderPriceInput {
  discount: Int
  price: ID
}

input UpdatePriceInput {
  active: Boolean
  nickname: String
}

input UpdateProductInput {
  active: Boolean
  description: String
  images: [String!]
  name: String
}

input UpdateRetreatInput {
  content: String
  endDate: Date
  maxParticipants: Int
  startDate: Date
  title: String
}

type User {
  createdAt: Date
  email: String
  emailVerified: Boolean
  id: ID!
  lastIp: String
  lastLogin: String
  loginsCount: Int
  name: String
  nickname: String
  picture: String
  updatedAt: Date
}
