### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Date

type Mutation {
  createRetreat(description: String, name: String!): Retreat
  setRetreatStatus(active: Boolean!, id: ID!): Retreat
  updateRetreat(id: ID!, input: UpdateRetreatInput!): Retreat
  updateRetreatMetadata(id: ID!, input: UpdateRetreatMetadataInput!): RetreatMetadata
}

enum OrderEnum {
  ASC
  DESC
}

"""
PageInfo cursor, as defined in https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """
  The cursor corresponding to the last nodes in edges. Null if the connection is empty.
  """
  endCursor: String

  """
  Used to indicate whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Used to indicate whether more edges exist prior to the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  The cursor corresponding to the first nodes in edges. Null if the connection is empty.
  """
  startCursor: String
}

interface PaginatedQuery {
  paginationMeta: PaginationMeta!
}

type PaginatedUser implements PaginatedQuery {
  items: [User!]!
  paginationMeta: PaginationMeta!
}

type PaginationMeta {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  perPage: Int!
  totalItems: Int!
  totalPages: Int!
}

type Price {
  active: Boolean!
  amount: Int!
  created: Date!
  currency: String!
  id: ID!
  metadata: PriceMetadata!
  parent: PriceParent!
}

type PriceMetadata {
  createdAt: Date!
  description: String
  id: ID!
  priceId: ID!
  updatedAt: Date!
}

union PriceParent = Retreat

type Query {
  me: User
  retreat(id: ID!): Retreat
  retreatBySlug(slug: String!): Retreat
  retreatMetadata(id: ID, retreatId: ID): RetreatMetadata
  retreats(
    """https://stripe.com/docs/api/products/list#list_products-active"""
    active: Boolean

    """Returns the elements in the list that come after the specified cursor"""
    after: String

    """Returns the elements in the list that come before the specified cursor"""
    before: String

    """Returns the first n elements from the list."""
    first: Int

    """Returns the last n elements from the list."""
    last: Int
  ): RetreatConnection
  user(id: ID!): User
  users(order: OrderEnum! = ASC, orderBy: UserSortByEnum! = CREATED_AT, page: Int! = 0, perPage: Int! = 25, search: String): PaginatedUser
}

type Retreat {
  active: Boolean!
  created: Date!
  description: String
  id: ID!
  images: [String!]!
  metadata: RetreatMetadata!
  name: String
  prices(active: Boolean): [Price!]!
  updated: Date!
  url: String
}

type RetreatConnection {
  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-Edge-Types
  """
  edges: [RetreatEdge]

  """
  https://facebook.github.io/relay/graphql/connections.htm#sec-undefined.PageInfo
  """
  pageInfo: PageInfo!
}

type RetreatEdge {
  """https://facebook.github.io/relay/graphql/connections.htm#sec-Cursor"""
  cursor: String!

  """https://facebook.github.io/relay/graphql/connections.htm#sec-Node"""
  node: Retreat
}

type RetreatMetadata {
  content: String
  createdAt: Date!
  endDate: Date
  id: ID!
  maxParticipants: Int!
  retreatId: ID!
  slug: String!
  startDate: Date
  updatedAt: Date!
}

input UpdateRetreatInput {
  description: String
  images: [String!]
  name: String!
}

input UpdateRetreatMetadataInput {
  content: String
  endDate: Date
  maxParticipants: Int
  slug: String
  startDate: Date
}

type User {
  createdAt: Date!
  email: String!
  emailVerified: Boolean!
  id: ID!
  lastIp: String
  lastLogin: Date
  loginsCount: Int!
  name: String
  picture: String
  roles: [UserRoleEnum!]!
  updateAt: Date!
}

enum UserRoleEnum {
  ADMIN
  EDITOR
  SUPER_ADMIN
}

enum UserSortByEnum {
  CREATED_AT
  EMAIL
  NAME
}
