// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum RetreatStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

model Retreat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products String[] // Array of ids related to Stripe.Product

  status  RetreatStatus @default(DRAFT)
  title   String        @db.VarChar(255)
  slug    String        @unique
  content String?

  startDate DateTime?
  endDate   DateTime?

  maxParticipants Int     @default(0)
  orders          Order[]
}

enum OrderStatus {
  CREATED // Initial state awaiting checkout
  PENDING // Checkout is pending
  PARTIALLY_CONFIRMED // Partially paid
  CONFIRMED // Fully paid
  DECLINED // Checkout cancelled or payment declined
  CANCELLED // Cancelled and refunded (partially or fully)
  ERRORED // Something whet wrong while processing the order
}

model Order {
  id String @id @default(cuid())

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  confirmedAt DateTime?
  cancelledAt DateTime?

  retreat   Retreat @relation(fields: [retreatId], references: [id])
  retreatId String

  status OrderStatus @default(CREATED)

  price            String // Id of Stripe.Price
  coupon           String?
  checkoutSessions String[] // Array Id of Stripe.Checkout.Session
  refunds          String[] // Array Id of Stripe.Refund

  name  String
  email String

  metadata    OrderMetadata?
  errorReason String?
}

model OrderMetadata {
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}

enum LogItemType {
  RETREAT
  ORDER
}

model LogItem {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  itemType  LogItemType
  itemId    String
  userId    String?
  event     String
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
